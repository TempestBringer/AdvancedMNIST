mb

    def build_layers(self):
        # in_channel, out_channel, kernel_size, stride, padding, padding_mode, dilation, groups, bias
        # 28x28x1 -> 26*26*8
        self.layers.append(nn.Conv2d(in_channels=1, out_channels=8, kernel_size=3))
        # 26*26*8 -> 13*13*8
        self.layers.append(nn.MaxPool2d(2))
        # 13*13*8 -> 10*10*32
        self.layers.append(nn.Conv2d(in_channels=8, out_channels=32, kernel_size=4))
        # 10*10*32 -> 3200
        self.layers.append(nn.Flatten(1, 3))
        # 3200 -> 256
        self.layers.append(nn.Linear(3200, 320))
        self.layers.append(nn.ReLU())
        # 256 -> 64
        # self.layers.append(nn.Linear(256, 64))
        # self.layers.append(nn.ReLU())
        # 64 -> output_class
        self.layers.append(nn.Linear(320, self.output_class))
        self.layers.append(nn.ReLU())

    parser = argparse.ArgumentParser("手写数学符号数据集的网络训练")
    parser.add_argument("--read_ckpt", type=str, help="权重文件路径，用于继续训练，无则留空")
    parser.add_argument("--seed", type=int, help="随机种子")
    parser.add_argument("--save_ckpt_folder", type=str, help="权重文件路径，用于保存")
    parser.add_argument("--save_ckpt_name", type=str, help="权重文件名，用于保存")
    parser.add_argument("--epoch", type=int, default=30, help="训练轮数")
    parser.add_argument("--lr_decay_after_epoch", type=int, default=10, help="lr在该训练轮数后线性衰减")

    parser.add_argument("--batch_size", type=int, default=16, help="Batch size")
    parser.add_argument("--device", type=str, default="cuda:0", help="训练设备，cuda:0等或cpu")
    parser.add_argument("--image_compress_x", type=int, default=28, help="训练集图片放缩到的大小")
    parser.add_argument("--image_compress_y", type=int, default=28, help="训练集图片放缩到的大小")
    parser.add_argument("--output_class", type=int, default=16, help="最后一层输出向量长度")
    parser.add_argument("--data_load_workers", type=int, default=1, help="数据集加载线程数")
    parser.add_argument("--lr", type=float, default=0.04, help="学习率")
    parser.add_argument("--momentum", type=float, default=0.9, help="动量优化器参数")
    return parser.parse_args()

    0.67



    parser = argparse.ArgumentParser("手写数学符号数据集的网络训练")
    parser.add_argument("--read_ckpt", type=str, help="权重文件路径，用于继续训练，无则留空")
    parser.add_argument("--seed", type=int, help="随机种子")
    parser.add_argument("--save_ckpt_folder", type=str, help="权重文件路径，用于保存")
    parser.add_argument("--save_ckpt_name", type=str, help="权重文件名，用于保存")
    parser.add_argument("--epoch", type=int, default=30, help="训练轮数")
    parser.add_argument("--lr_decay_after_epoch", type=int, default=10, help="lr在该训练轮数后线性衰减")

    parser.add_argument("--batch_size", type=int, default=8, help="Batch size")
    parser.add_argument("--device", type=str, default="cuda:0", help="训练设备，cuda:0等或cpu")
    parser.add_argument("--image_compress_x", type=int, default=28, help="训练集图片放缩到的大小")
    parser.add_argument("--image_compress_y", type=int, default=28, help="训练集图片放缩到的大小")
    parser.add_argument("--output_class", type=int, default=16, help="最后一层输出向量长度")
    parser.add_argument("--data_load_workers", type=int, default=1, help="数据集加载线程数")
    parser.add_argument("--lr", type=float, default=0.02, help="学习率")
    parser.add_argument("--momentum", type=float, default=0.9, help="动量优化器参数")

    0.68



def parse_args():
    parser = argparse.ArgumentParser("手写数学符号数据集的网络训练")
    parser.add_argument("--read_ckpt", type=str, help="权重文件路径，用于继续训练，无则留空")
    parser.add_argument("--seed", type=int, help="随机种子")
    parser.add_argument("--save_ckpt_folder", type=str, help="权重文件路径，用于保存")
    parser.add_argument("--save_ckpt_name", type=str, help="权重文件名，用于保存")
    parser.add_argument("--epoch", type=int, default=30, help="训练轮数")
    parser.add_argument("--lr_decay_after_epoch", type=int, default=10, help="lr在该训练轮数后线性衰减")

    parser.add_argument("--batch_size", type=int, default=4, help="Batch size")
    parser.add_argument("--device", type=str, default="cuda:0", help="训练设备，cuda:0等或cpu")
    parser.add_argument("--image_compress_x", type=int, default=28, help="训练集图片放缩到的大小")
    parser.add_argument("--image_compress_y", type=int, default=28, help="训练集图片放缩到的大小")
    parser.add_argument("--output_class", type=int, default=16, help="最后一层输出向量长度")
    parser.add_argument("--data_load_workers", type=int, default=1, help="数据集加载线程数")
    parser.add_argument("--lr", type=float, default=0.02, help="学习率")
    parser.add_argument("--momentum", type=float, default=0.9, help="动量优化器参数")
    return parser.parse_args()

    0.72


ma

   def build_layers(self):
        # in_channel, out_channel, kernel_size, stride, padding, padding_mode, dilation, groups, bias
        # 28x28x1 -> 24*24*8
        self.layers.append(nn.Conv2d(in_channels=1, out_channels=8, kernel_size=5))
        # 24*24*8 -> 12*12*8
        self.layers.append(nn.MaxPool2d(2))
        # 12*12*8 -> 8*8*32
        self.layers.append(nn.Conv2d(in_channels=8, out_channels=32, kernel_size=5))
        # 8*8*32 -> 2048
        self.layers.append(nn.Flatten(1, 3))
        # 2048 -> 256
        self.layers.append(nn.Linear(2048, 256))
        self.layers.append(nn.ReLU())
        # 256 -> 64
        self.layers.append(nn.Linear(256, 64))
        self.layers.append(nn.ReLU())
        # 64 -> output_class
        self.layers.append(nn.Linear(64, self.output_class))
        self.layers.append(nn.ReLU())



def parse_args():
    parser = argparse.ArgumentParser("手写数学符号数据集的网络训练")
    parser.add_argument("--read_ckpt", type=str, help="权重文件路径，用于继续训练，无则留空")
    parser.add_argument("--seed", type=int, help="随机种子")
    parser.add_argument("--save_ckpt_folder", type=str, help="权重文件路径，用于保存")
    parser.add_argument("--save_ckpt_name", type=str, help="权重文件名，用于保存")
    parser.add_argument("--epoch", type=int, default=20, help="训练轮数")
    parser.add_argument("--lr_decay_after_epoch", type=int, default=10, help="lr在该训练轮数后线性衰减")

    parser.add_argument("--batch_size", type=int, default=2, help="Batch size")
    parser.add_argument("--device", type=str, default="cuda:0", help="训练设备，cuda:0等或cpu")
    parser.add_argument("--image_compress_x", type=int, default=28, help="训练集图片放缩到的大小")
    parser.add_argument("--image_compress_y", type=int, default=28, help="训练集图片放缩到的大小")
    parser.add_argument("--output_class", type=int, default=16, help="最后一层输出向量长度")
    parser.add_argument("--data_load_workers", type=int, default=1, help="数据集加载线程数")
    parser.add_argument("--lr", type=float, default=0.02, help="学习率")
    parser.add_argument("--momentum", type=float, default=0.9, help="动量优化器参数")
    return parser.parse_args()


    0.79

    bs  1  0.4.
        4、8  0.69